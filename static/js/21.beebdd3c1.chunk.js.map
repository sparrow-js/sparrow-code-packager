{"version":3,"sources":["webpack:////Users/haitaowu/test/codesandbox-client/standalone-packages/codesandbox-browserfs/dist/shims/buffer.js","webpack:///../common/lib/utils/jest-lite.js","webpack:///./src/sandbox/eval/tests/run-circus.ts","webpack:///./src/sandbox/eval/tests/jest-lite.ts"],"names":["module","exports","BrowserFS","BFSRequire","Object","defineProperty","value","messages","currentDescribeBlocks","run","a","getState","rootDescribeBlock","length","dispatch","name","_runTestsForDescribeBlock","makeTestResults","_setGlobalState","test","currentTestPath","expect","testPath","split","testName","describeBlocks","update","currentTestName","join","snapshotState","SnapshotState","expand","updateSnapshot","setState","describeBlock","push","getAllHooksForDescribe","beforeAll","afterAll","hook","_callHook","tests","_runTest","children","child","pop","testContext","create","mode","hasFocusedTests","getEachHooksForTest","afterEach","beforeEach","_callTest","timeout","testTimeout","callAsyncFn","fn","isHook","then","error","Error","extend","toMatchSnapshot","toThrowErrorMatchingSnapshot","addSnapshotSerializer","addSerializer","jsdomPromise","getJSDOM","src","jsdomPath","navigator","userAgent","indexOf","Promise","resolve","reject","s","document","createElement","setAttribute","body","appendChild","onload","onerror","resetTestState","ROOT_DESCRIBE_BLOCK","makeDescribe","ROOT_DESCRIBE_BLOCK_NAME","INITIAL_STATE","currentDescribeBlock","undefined","assertionCalls","expectedAssertionsNumber","isExpectingAssertions","suppressedErrors","TestRunner","manager","message","testToCodeSandbox","sendMessage","TEST_START","errors","status","forEach","err","mappedErrors","mappedError","actions","show","line","_originalLineNumber","column","_originalColumnNumber","path","payload","source","TEST_END","errorToCodeSandbox","FILE_ERROR","DESCRIBE_START","blockName","DESCRIBE_END","ADD_TEST","type","watching","ranTests","clear","runTests","this","Set","addEventHandler","handleMessage","listen","handleCodeSandboxMessage","INITIALIZE","dispatchJest","skip","only","each","bindEach","it","jestTestHooks","jest","jestMock","jsdomWindow","dom","window","defaultView","jsdomDocument","Date","fetch","jestRuntimeGlobals","getRuntimeGlobals","globals","global","keys","globalKey","modules","t","REMOVE_FILE","filter","isTest","map","p","all","tModule","getTranspiledModule","compilation","has","ADD_FILE","transpileModules","event","JSDOM","url","location","origin","LOCALHOST_URL","pretendToBeVisual","oldEnvVars","envVariables","NODE_ENV","close","force","initJSDOM","TOTAL_TEST_START","testModules","preset","react","resolveModule","e","reactTs","configurations","parsed","setupFilesAfterEnv","setupPath","testSetup","findTests","transpileTests","setup","evaluateModule","setTestGlobals","add","teardown","setTimeout","TOTAL_TEST_END","parsedError","parse","stack","matcherResult","Boolean","blocks","parent","reverse","duration","getDescribeBlocks","includes","endsWith","ext"],"mappings":"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","file":"static/js/21.beebdd3c1.chunk.js","sourcesContent":["module.exports = BrowserFS.BFSRequire('buffer');\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.messages = void 0;\nvar messages;\n(function (messages) {\n    messages[\"INITIALIZE\"] = \"initialize_tests\";\n    messages[\"ADD_FILE\"] = \"add_file\";\n    messages[\"REMOVE_FILE\"] = \"remove_file\";\n    messages[\"FILE_ERROR\"] = \"file_error\";\n    messages[\"TOTAL_TEST_START\"] = \"total_test_start\";\n    messages[\"TOTAL_TEST_END\"] = \"total_test_end\";\n    messages[\"TEST_START\"] = \"test_start\";\n    messages[\"TEST_END\"] = \"test_end\";\n    messages[\"DESCRIBE_START\"] = \"describe_start\";\n    messages[\"DESCRIBE_END\"] = \"describe_end\";\n    messages[\"ADD_TEST\"] = \"add_test\";\n})(messages = exports.messages || (exports.messages = {}));\n","/**\n * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n/* eslint-disable no-use-before-define, no-restricted-syntax, no-await-in-loop */\n\nimport { getState, dispatch } from 'jest-circus/build/state';\nimport {\n  callAsyncFn,\n  getAllHooksForDescribe,\n  getEachHooksForTest,\n  makeTestResults,\n} from 'jest-circus/build/utils';\nimport { SnapshotState } from 'jest-snapshot';\nimport expect from 'expect';\n\nimport {\n  TestEntry,\n  TestResults,\n  TestContext,\n  Hook,\n  DescribeBlock,\n} from './types';\n\nconst currentDescribeBlocks = [];\n\nconst run = async (): Promise<TestResults> => {\n  const { rootDescribeBlock } = getState();\n  currentDescribeBlocks.length = 0;\n  dispatch({ name: 'run_start' });\n  await _runTestsForDescribeBlock(rootDescribeBlock);\n  dispatch({ name: 'run_finish' });\n  return makeTestResults(getState().rootDescribeBlock);\n};\n\nconst _setGlobalState = (test: TestEntry) => {\n  const { testPath: currentTestPath } = expect.getState();\n  const [testPath, testName] = test.name.split(':#:');\n\n  // remove root block\n  const [, ...describeBlocks] = [...currentDescribeBlocks];\n  const describeName =\n    describeBlocks.length > 0 ? describeBlocks.join(' ') + ' ' : '';\n\n  const currentTestName = describeName + testName;\n  const update: {\n    // @ts-ignore\n    snapshotState?: SnapshotState;\n    testPath?: string;\n    currentTestName: string;\n  } = { currentTestName };\n  if (testPath == null || currentTestPath !== testPath) {\n    // @ts-ignore\n    update.snapshotState = new SnapshotState(testPath, {\n      expand: true,\n      updateSnapshot: 'none',\n    });\n    update.testPath = testPath;\n  }\n\n  expect.setState(update);\n};\n\nconst _runTestsForDescribeBlock = async (describeBlock: DescribeBlock) => {\n  currentDescribeBlocks.push(describeBlock.name);\n  dispatch({ describeBlock, name: 'run_describe_start' });\n  const { beforeAll, afterAll } = getAllHooksForDescribe(describeBlock);\n\n  for (const hook of beforeAll) {\n    _callHook(hook);\n  }\n  for (const test of describeBlock.tests) {\n    await _runTest(test);\n  }\n  for (const child of describeBlock.children) {\n    await _runTestsForDescribeBlock(child);\n  }\n\n  for (const hook of afterAll) {\n    _callHook(hook);\n  }\n  dispatch({ describeBlock, name: 'run_describe_finish' });\n  currentDescribeBlocks.pop();\n};\n\nconst _runTest = async (test: TestEntry): Promise<void> => {\n  const testContext = Object.create(null);\n\n  const isSkipped =\n    test.mode === 'skip' ||\n    (getState().hasFocusedTests && test.mode !== 'only');\n\n  if (isSkipped) {\n    dispatch({ name: 'test_skip', test });\n    return;\n  }\n\n  const { afterEach, beforeEach } = getEachHooksForTest(test);\n\n  for (const hook of beforeEach) {\n    await _callHook(hook, testContext);\n  }\n\n  await _callTest(test, testContext);\n\n  for (const hook of afterEach) {\n    await _callHook(hook, testContext);\n  }\n};\n\nconst _callHook = (hook: Hook, testContext?: TestContext): Promise<any> => {\n  dispatch({ hook, name: 'hook_start' });\n  const { testTimeout: timeout } = getState();\n  return callAsyncFn(hook.fn, testContext, { isHook: true, timeout })\n    .then(() => dispatch({ hook, name: 'hook_success' }))\n    .catch(error => dispatch({ error, hook, name: 'hook_failure' }));\n};\n\nconst _callTest = async (\n  test: TestEntry,\n  testContext: TestContext\n): Promise<any> => {\n  dispatch({ name: 'test_start', test });\n  const { testTimeout: timeout } = getState();\n\n  if (!test.fn) {\n    throw Error(`Tests with no 'fn' should have 'mode' set to 'skipped'`);\n  }\n  _setGlobalState(test);\n\n  return callAsyncFn(test.fn, testContext, { isHook: false, timeout })\n    .then(() => dispatch({ name: 'test_success', test }))\n    .catch(error => dispatch({ error, name: 'test_failure', test }));\n};\n\nexport default run;\n","import { dispatch, actions, listen } from 'codesandbox-api';\nimport { react, reactTs } from '@codesandbox/common/lib/templates';\nimport { messages } from '@codesandbox/common/lib/utils/jest-lite';\n\nimport expect from 'expect';\nimport jestMock from 'jest-mock';\nimport jestTestHooks from 'jest-circus';\n\nimport { makeDescribe } from 'jest-circus/build/utils';\nimport path from 'path';\nimport { bind as bindEach } from 'jest-each';\n\nimport {\n  addSerializer,\n  toMatchSnapshot,\n  toThrowErrorMatchingSnapshot,\n} from 'jest-snapshot';\n\nimport {\n  addEventHandler,\n  setState,\n  dispatch as dispatchJest,\n  ROOT_DESCRIBE_BLOCK_NAME,\n} from 'jest-circus/build/state';\nimport { parse } from 'sandbox-hooks/react-error-overlay/utils/parser';\nimport { map } from 'sandbox-hooks/react-error-overlay/utils/mapper';\nimport { Manager } from 'sandpack-core';\nimport { Module } from 'sandpack-core/lib/types/module';\n\nimport run from './run-circus';\n\nimport { Event, TestEntry, DescribeBlock, TestName, TestFn } from './types';\n\nexport { messages };\n\nexpect.extend({\n  toMatchSnapshot,\n  toThrowErrorMatchingSnapshot,\n});\nexpect.addSnapshotSerializer = addSerializer;\n\nfunction addScript(src: string) {\n  return new Promise((resolve, reject) => {\n    const s = document.createElement('script');\n    s.setAttribute('src', src);\n    document.body.appendChild(s);\n    s.onload = () => {\n      resolve();\n    };\n    s.onerror = error => {\n      reject(error);\n    };\n  });\n}\n\nlet jsdomPromise = null;\n/**\n * Load JSDOM while the sandbox loads. Before we run a test we make sure that this has been loaded.\n */\nconst getJSDOM = () => {\n  let jsdomPath = '/static/js/jsdom-16.3.0.min.js';\n  if (\n    navigator.userAgent.indexOf('jsdom') !== -1 &&\n    process.env.NODE_ENV === 'test'\n  ) {\n    jsdomPath = 'file://' + path.resolve('./static/js/jsdom-16.3.0.min.js');\n  }\n\n  jsdomPromise = jsdomPromise || addScript(jsdomPath);\n\n  return jsdomPromise;\n};\n\nfunction resetTestState() {\n  const ROOT_DESCRIBE_BLOCK = makeDescribe(ROOT_DESCRIBE_BLOCK_NAME);\n  const INITIAL_STATE = {\n    currentDescribeBlock: ROOT_DESCRIBE_BLOCK,\n    expand: undefined,\n    hasFocusedTests: false,\n    rootDescribeBlock: ROOT_DESCRIBE_BLOCK,\n    testTimeout: 5000,\n  };\n\n  expect.setState({\n    assertionCalls: 0,\n    expectedAssertionsNumber: null,\n    isExpectingAssertions: false,\n    suppressedErrors: [],\n    testPath: null,\n    currentTestName: null,\n    snapshotState: null,\n  });\n\n  setState(INITIAL_STATE);\n}\n\nexport default class TestRunner {\n  tests: Array<Module>;\n  ranTests: Set<string>;\n  manager: Manager;\n  watching: boolean = true;\n\n  LOCALHOST_URL: string = 'http://localhost';\n\n  dom: any;\n\n  constructor(manager: Manager) {\n    this.manager = manager;\n    this.ranTests = new Set();\n\n    addEventHandler(this.handleMessage);\n    listen(this.handleCodeSandboxMessage);\n\n    this.sendMessage(messages.INITIALIZE);\n  }\n\n  public getRuntimeGlobals(module: Module) {\n    const test = (testName: TestName, fn?: TestFn) =>\n      dispatchJest({\n        fn,\n        name: 'add_test',\n        testName: `${module.path}:#:${testName}`,\n      });\n    const skip = (testName: TestName, fn?: TestFn) =>\n      dispatchJest({\n        fn,\n        mode: 'skip',\n        name: 'add_test',\n        testName: `${module.path}:#:${testName}`,\n      });\n    const only = (testName: TestName, fn: TestFn) => {\n      dispatchJest({\n        fn,\n        mode: 'only',\n        name: 'add_test',\n        testName: `${module.path}:#:${testName}`,\n      });\n    };\n    test.each = bindEach(test);\n    skip.each = bindEach(skip);\n    only.each = bindEach(only);\n\n    test.only = only;\n    test.skip = skip;\n\n    const it = test;\n    return {\n      ...jestTestHooks,\n      test,\n      jest: jestMock,\n      it,\n      expect,\n    };\n  }\n\n  /**\n   * In this function we actually set some globals on the global window. This is because there are modules out\n   * there that try to overwrite some globals that we try to set. For example, this code won't work:\n   *\n   * ```js\n   * const test = 5;\n   * ```\n   *\n   * if we add test to the scope in the function:\n   *\n   * ```ts\n   * function evaluate(test) {\n   *   const test = 5; // <- Error!\n   * }\n   * ```\n   *\n   * Because of this, we have to put these globals on the global window. The big disadvantage of this is that\n   * we cannot run these tests in parallel. If we would want to do that we could introduce the globals in separate\n   * scope (separate function) that wraps the inner function, like this:\n   *\n   * ```ts\n   * (function jestGlobals(test) {\n   *   (function evaluate() {\n   *     const test = 5; // <- No Error!\n   *   })()\n   * })\n   * ```\n   *\n   * Right now we're making sure to clean the globals up in teardown\n   *\n   * Related issue: https://github.com/codesandbox/codesandbox-client/issues/4922\n   */\n  setTestGlobals(module: Module) {\n    const jsdomWindow = this.dom.window.document.defaultView;\n    const { document: jsdomDocument } = jsdomWindow;\n\n    // Set the modules that are not set on JSDOM\n    jsdomWindow.Date = Date;\n    jsdomWindow.fetch = fetch;\n\n    const jestRuntimeGlobals = this.getRuntimeGlobals(module);\n\n    const globals = {\n      document: jsdomDocument,\n      window: jsdomWindow,\n      global: jsdomWindow,\n    };\n\n    Object.keys(jestRuntimeGlobals).forEach(globalKey => {\n      window[globalKey] = jestRuntimeGlobals[globalKey];\n    });\n\n    return globals;\n  }\n\n  static isTest(testPath: string) {\n    const endsWith = [\n      '.test.js',\n      '.test.ts',\n      '.test.tsx',\n      '.spec.js',\n      '.spec.ts',\n      '.spec.tsx',\n    ];\n\n    if (\n      testPath.includes('__tests__') &&\n      (testPath.endsWith('.js') ||\n        testPath.endsWith('.ts') ||\n        testPath.endsWith('.tsx'))\n    ) {\n      return true;\n    }\n\n    return endsWith.filter(ext => testPath.endsWith(ext)).length > 0;\n  }\n\n  findTests(modules: { [path: string]: Module }) {\n    if (this.tests) {\n      this.tests.forEach(t => {\n        if (!modules[t.path]) {\n          // A removed test\n          this.sendMessage(messages.REMOVE_FILE, { path: t.path });\n        }\n      });\n    }\n    this.tests = Object.keys(modules)\n      .filter(TestRunner.isTest)\n      .map(p => modules[p]);\n\n    return this.tests;\n  }\n\n  /* istanbul ignore next */\n  async transpileTests() {\n    return Promise.all(\n      (this.tests || []).map(async t => {\n        const tModule = this.manager.getTranspiledModule(t, '');\n        if (\n          tModule.source &&\n          tModule.compilation &&\n          this.ranTests.has(t.path)\n        ) {\n          // We cached this test, don't run it again. We only run tests of changed\n          // files\n          return null;\n        }\n\n        this.sendMessage(messages.ADD_FILE, { path: t.path });\n        try {\n          await this.manager.transpileModules(t, true);\n\n          if (!tModule.source) {\n            this.ranTests.delete(t.path);\n          }\n\n          return t;\n        } catch (e) {\n          const error = await this.errorToCodeSandbox(e);\n          this.ranTests.delete(t.path);\n          this.sendMessage(messages.FILE_ERROR, { path: t.path, error });\n\n          return null;\n        }\n      })\n    );\n  }\n\n  sendMessage(event: string, message: any = {}) {\n    dispatch({\n      type: 'test',\n      event,\n      ...message,\n    });\n  }\n\n  async initJSDOM() {\n    await getJSDOM();\n    const { JSDOM } = (window as any).JSDOM;\n    let url = document.location.origin;\n    if (url === 'null') {\n      url = this.LOCALHOST_URL;\n    }\n\n    this.dom = new JSDOM('<!DOCTYPE html>', {\n      pretendToBeVisual: true,\n      url,\n    });\n  }\n\n  oldEnvVars: { [key: string]: string };\n  async setup() {\n    this.oldEnvVars = { ...this.manager.envVariables };\n    this.manager.envVariables.NODE_ENV = 'test';\n  }\n\n  async teardown() {\n    const global = this.dom.window.document.defaultView;\n    global.close();\n    Object.defineProperty(global, 'document', { value: null });\n    this.dom = null;\n    this.manager.envVariables = this.oldEnvVars;\n\n    // @ts-expect-error We don't have the module, but the module is only used in a lazy context\n    const jestRuntimeGlobals = this.getRuntimeGlobals();\n    Object.keys(jestRuntimeGlobals).forEach(globalKey => {\n      delete window[globalKey];\n    });\n  }\n\n  /* istanbul ignore next */\n  async runTests(force: boolean = false) {\n    if (!this.watching && !force) {\n      return;\n    }\n\n    await this.initJSDOM();\n\n    this.sendMessage(messages.TOTAL_TEST_START);\n\n    let testModules: Module[] = [];\n\n    try {\n      if (this.manager.preset.name === react.name) {\n        try {\n          testModules = [\n            this.manager.resolveModule('./src/setupTests.js', '/'),\n          ];\n        } catch (e) {\n          testModules = [\n            this.manager.resolveModule('./src/setupTests.ts', '/'),\n          ];\n        }\n      } else if (this.manager.preset.name === reactTs.name) {\n        testModules = [this.manager.resolveModule('./src/setupTests.ts', '/')];\n      } else if (this.manager.configurations.package) {\n        const { parsed } = this.manager.configurations.package;\n\n        if (parsed && parsed.jest && parsed.jest.setupFilesAfterEnv) {\n          testModules = parsed.jest.setupFilesAfterEnv.map(\n            (setupPath: string) => this.manager.resolveModule(setupPath, '/')\n          );\n        }\n      }\n    } catch (e) {\n      /* ignore */\n    }\n\n    if (testModules.length) {\n      await Promise.all(\n        testModules.map(testSetup =>\n          this.manager.transpileModules(testSetup, true)\n        )\n      );\n    }\n\n    if (this.manager.modules) {\n      this.findTests(this.manager.modules);\n    }\n\n    // $FlowIssue\n    const tests: Array<Module> = (await this.transpileTests()).filter(t => t);\n\n    resetTestState();\n\n    await this.setup();\n\n    await Promise.all(\n      tests.map(async t => {\n        dispatch(actions.error.clear(t.path, 'jest'));\n\n        try {\n          if (testModules.length) {\n            testModules.forEach(module => {\n              this.manager.evaluateModule(module, {\n                force: true,\n                globals: this.setTestGlobals(module),\n              });\n            });\n          }\n\n          this.manager.evaluateModule(t, {\n            force: true,\n            globals: this.setTestGlobals(t),\n          });\n          this.ranTests.add(t.path);\n        } catch (e) {\n          this.ranTests.delete(t.path);\n          const error = await this.errorToCodeSandbox(e);\n          this.sendMessage(messages.FILE_ERROR, { path: t.path, error });\n        }\n      })\n    );\n\n    await run();\n    await this.teardown();\n\n    setTimeout(() => {\n      this.sendMessage(messages.TOTAL_TEST_END);\n    });\n  }\n\n  async errorToCodeSandbox(\n    error: Error & {\n      matcherResult?: boolean;\n    }\n  ) {\n    const parsedError = parse(error);\n    const mappedErrors = await map(parsedError);\n\n    return {\n      name: error.name,\n      message: error.message,\n      stack: error.stack,\n      matcherResult: Boolean(error.matcherResult),\n      mappedErrors,\n    };\n  }\n\n  getDescribeBlocks(test: TestEntry) {\n    let t: TestEntry | DescribeBlock | undefined = test;\n    const blocks = [];\n\n    while (t.parent != null) {\n      blocks.push(t.parent.name);\n\n      t = t.parent;\n    }\n\n    // Remove ROOT_DESCRIBE_BLOCK\n    blocks.pop();\n\n    return blocks.reverse();\n  }\n\n  async testToCodeSandbox(test: TestEntry) {\n    const [testPath, name] = test.name.split(':#:');\n\n    const errors = await Promise.all(test.errors.map(this.errorToCodeSandbox));\n\n    return {\n      name,\n      path: testPath,\n      duration: test.duration,\n      status: test.status || 'running',\n      errors,\n      blocks: this.getDescribeBlocks(test),\n    };\n  }\n\n  handleMessage = async (message: Event) => {\n    switch (message.name) {\n      case 'test_start': {\n        const test = await this.testToCodeSandbox(message.test);\n\n        return this.sendMessage(messages.TEST_START, {\n          test,\n        });\n      }\n      case 'test_failure':\n      case 'test_success': {\n        const { suppressedErrors } = expect.getState();\n\n        if (suppressedErrors && suppressedErrors.length) {\n          /* eslint-disable no-param-reassign */\n          message.test.errors = suppressedErrors;\n          message.test.status = 'fail';\n          /* eslint-enable no-param-reassign */\n          expect.setState({ suppressedErrors: [] });\n        }\n        const test = await this.testToCodeSandbox(message.test);\n\n        if (test.errors) {\n          test.errors.forEach(err => {\n            if (err.mappedErrors && err.mappedErrors.length) {\n              const { mappedErrors } = err;\n              const [mappedError] = mappedErrors;\n\n              dispatch(\n                actions.error.show(err.name || 'Jest Error', err.message, {\n                  line: mappedError._originalLineNumber,\n                  column: mappedError._originalColumnNumber,\n                  path: test.path,\n                  payload: {},\n                  source: 'jest',\n                })\n              );\n            }\n          });\n        }\n        try {\n          return this.sendMessage(messages.TEST_END, {\n            test,\n          });\n        } catch (e) {\n          const error = await this.errorToCodeSandbox(e);\n          return this.sendMessage(messages.FILE_ERROR, {\n            path: test.path,\n            error,\n          });\n        }\n      }\n      case 'start_describe_definition': {\n        return this.sendMessage(messages.DESCRIBE_START, {\n          blockName: message.blockName,\n        });\n      }\n      case 'finish_describe_definition': {\n        return this.sendMessage(messages.DESCRIBE_END);\n      }\n      case 'add_test': {\n        const [testPath, testName] = message.testName.split(':#:');\n        return this.sendMessage(messages.ADD_TEST, {\n          testName,\n          path: testPath,\n        });\n      }\n      default: {\n        return null;\n      }\n    }\n  };\n\n  handleCodeSandboxMessage = (message: any) => {\n    switch (message.type) {\n      case 'set-test-watching':\n        this.watching = message.watching;\n        if (message.watching === true) {\n          this.ranTests.clear();\n          this.runTests(true);\n        }\n        break;\n      case 'run-all-tests':\n        this.ranTests.clear();\n        this.runTests(true);\n        break;\n      case 'run-tests': {\n        const testPath = message.path;\n\n        this.ranTests.delete(testPath);\n        this.runTests();\n        break;\n      }\n    }\n  };\n\n  // We stub this, because old versions of CodeSandbox still needs this\n  reportError = () => {};\n}\n"],"sourceRoot":""}